<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"   
                    xmlns:myControl="clr-namespace:MyCustomControlLibrary;assembly=MyCustomControlLibrary"
                    xmlns:local="clr-namespace:IntentConnectWeighing">


    <!--菜单项MenuItem Template-->
    <ControlTemplate x:Key="IconMenuItemTemplate" TargetType="MenuItem">
        <Border x:Name="border" Background="Transparent" Height="{TemplateBinding Height}" Opacity="1" >
            <Grid VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="icon_col" MaxWidth="35" SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="16" x:Name="arrow_col" SharedSizeGroup="MenumItemArrow"/>
                </Grid.ColumnDefinitions>
                <!--icon-->
                <myControl:IconTextBlock x:Name="PART_Icon" 
                           Text="{TemplateBinding Icon}" 
                           Foreground="{TemplateBinding Foreground}" 
                           Margin="5,1,4,1"
                           FontSize="{TemplateBinding local:ControlAttachProperty.IconSize}"                            
                           />

                <!--Header-->
                <ContentPresenter Grid.Column="1" x:Name="txtHeader" 
                                  Margin="3,1,5,1" MinWidth="90"
                                  RecognizesAccessKey="True" 
                                  VerticalAlignment="Center" 
                                  ContentSource="Header"/>


                <!--快捷键 InputGestureText 暂不支持你了 -->
                <TextBlock Grid.Column="2" Margin="3,1,3,1" x:Name="IGTHost" 
                           Text="{TemplateBinding InputGestureText}" 
                           FontSize="{TemplateBinding FontSize}"
                           VerticalAlignment="Center" Visibility="Visible" 
                           Foreground="{TemplateBinding Foreground}" />

                <!--右指针-->
                <TextBlock x:Name="PART_Arrow" Grid.Column="3" 
                           Text="&#xe63d;" 
                           Foreground="{TemplateBinding Foreground}" 
                           FontSize="14" 
                           Style="{DynamicResource IFontStyle}"/>

                <!--淡出子集菜单容器-->
                <Popup x:Name="SubMenuPopup" 
                       AllowsTransparency="true"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       Placement="Bottom" 
                       Focusable="false" 
                       VerticalOffset="0"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="4" 
                            Margin="5"
                            Effect="{DynamicResource DefaultDropShadow}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                            <StackPanel Margin="0" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Grid>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <!--触发器-->
        <ControlTemplate.Triggers>
            <!--TopLevelHeader:第一级菜单（有子菜单）-->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                <Setter Property="Width" Value="0" TargetName="arrow_col"/>
            </Trigger>
            <!--TopLevelItem 第一级菜单（无子级）-->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                <Setter Property="Width" Value="0" TargetName="arrow_col"/>
            </Trigger>
            <!--SubmenuHeader:子菜单，有子菜单-->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
                <Setter Property="Placement" Value="Right" TargetName="SubMenuPopup"/>
                <Setter Property="HorizontalOffset" Value="2" TargetName="SubMenuPopup"/>                
            </Trigger>
            <!--SubMenuItem:子菜单，无子级-->
            <Trigger Property="Role" Value="SubMenuItem">
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
            </Trigger>
            <!--选中状态，优先级将高于Icon-->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_Icon" Value="&#xe62a;" Property="Text"></Setter>
                <Setter TargetName="PART_Icon" Value="18" Property="FontSize"></Setter>
                <Setter TargetName="PART_Icon" Value="{DynamicResource CheckedForeground}" Property="Foreground"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Value="{DynamicResource DisableOpacity}" Property="Opacity"></Setter>
            </Trigger>
            <!--高亮状态-->
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource MenuMouseOverBackground}"></Setter>
                <Setter Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"></Setter>
            </Trigger>
            <!--按下状态-->
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource MenuPressedBackground}"></Setter>
                <Setter Property="Foreground" Value="{DynamicResource MenuPressedForeground}"></Setter>
            </Trigger>
            <!--子菜单打开状态-->
            <Trigger Property="IsSubmenuOpen" Value="true" >
                <Setter TargetName="PART_Arrow" Value="{DynamicResource CheckedForeground}" Property="Foreground"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--菜单项MenuItem样式FIconMenuItem-->
    <Style x:Key="IconMenuItem" TargetType="MenuItem">
        <Setter Property="BorderBrush"  Value="{DynamicResource MenuBorderBrush}"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>        
        <Setter Property="local:ControlAttachProperty.IconSize" Value="12"/>
        <Setter Property="Template" Value="{StaticResource IconMenuItemTemplate}"></Setter>
    </Style>


    <!--基于FIconMenuItem的默认样式，提供Header模板-->
    <Style x:Key="DefaultMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource IconMenuItem}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="txtHeader" 
                               FontSize="{Binding FontSize,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"
                               HorizontalAlignment="Stretch" Margin="3,1,5,1"
                               Text="{Binding Header,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"
                               VerticalAlignment="Center"
                               Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--默认Menu样式-->
    <Style x:Key="DefaultMenu" TargetType="{x:Type Menu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ItemsPresenter 
                            Margin="0" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--窗口菜单-->
  
    <!--主窗体菜单按钮-->
        <Style TargetType="{x:Type Menu}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border CornerRadius="0">
                            <ItemsPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuItemstyle" TargetType="{x:Type MenuItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border Margin="0,2" x:Name="bd"   CornerRadius="0" >
                            <Border.Background>
                            <ImageBrush ImageSource="/IntentConnectWeighing;component/Themes/Img/Button/mmn.png" />
                            </Border.Background>
                            <Grid>
                                <ContentPresenter Margin="0,10" ContentSource="Header" Grid.Column="1" HorizontalAlignment="Left"/>
                                <Popup x:Name="pop" Margin="10" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Placement="Bottom">
                                <Border Margin="5" CornerRadius="4" Background="White" BorderThickness="1" BorderBrush="{DynamicResource MenuBorderBrush}">
                                    <StackPanel IsItemsHost="True">
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="bd" Property="Background" >
                                    <Setter.Value>
                                    <ImageBrush ImageSource="/IntentConnectWeighing;component/Themes/Img/Button/mmm.png" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="bd" Property="Background">
                                    <Setter.Value>
                                    <ImageBrush ImageSource="/IntentConnectWeighing;component/Themes/Img/Button/mme.png" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="pop" Property="IsOpen" Value="true"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--默认右键菜单ContextMenu样式-->
    <Style x:Key="DefaultContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuBorderBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource DefaultMenuItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
                                Margin="5"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}"
                                CornerRadius="4"
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter x:Name="ItemsPresenter" 
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" 
                                            Margin="0" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                             KeyboardNavigation.TabNavigation="Cycle" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Border" Property="Effect" Value="{DynamicResource DefaultDropShadow}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    
    <!--TreeViewItem默认样式-->

    <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="local:ControlAttachProperty.IconSize" Value="19"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border x:Name="Bd" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}" 
                                UseLayoutRounding="True" 
                                SnapsToDevicePixels="{TemplateBinding 
                                SnapsToDevicePixels}">
                            <!--多层级间隔，暂缓-->
                            <!--<Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Grid Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="18" Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <!--展开收缩按钮-->
                                <ToggleButton x:Name="ExpanderBtn"  IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                              ClickMode="Press" >
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Border>
                                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <ToggleButton.Content>
                                        <TextBlock x:Name="ExpanderIcon"  
                                                   Foreground="{TemplateBinding Foreground}" 
                                                   Text="&#xe62c;" 
                                                   Style="{DynamicResource IFontStyle}"
                                                   FontSize="{TemplateBinding local:ControlAttachProperty.IconSize}" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <!--内容-->
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                        
                        <ItemsPresenter Margin="18,0,0,0" x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        
                    </StackPanel>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderIcon" Property="Text" Value="&#xe62d;" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="ExpanderIcon" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource ItemMouseOverBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource ItemMouseOverForeground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource ItemSelectedBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource ItemSelectedForeground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource ItemSelectedBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource ItemSelectedForeground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TreeView样式-->
    <Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="Background" Value="{DynamicResource ItemsContentBackground}"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource DefaultTreeViewItem}"></Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="True" VirtualizationMode="Recycling" Margin="0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>







</ResourceDictionary>